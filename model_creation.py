import pandas as pd
from sklearn.linear_model import LinearRegression, LogisticRegression, Ridge
from sklearn.svm import SVR, SVC
from sklearn.neighbors import KNeighborsRegressor, KNeighborsClassifier
from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from xgboost import XGBRegressor, XGBClassifier

def select_models(data, target_column):
    """
    Automatically select suitable models for regression or classification tasks based on the datatype of the target variable
    and create instances of the selected models.

    Args:
        data (DataFrame): Input data containing both features and the target variable.
        target_column (str): Name of the target variable column.

    Returns:
        models_selected (dict): A dictionary containing instances of the selected models.
        models_type (str): The type of the selected models (Regression or classification)
    """
    target_dtype = data[target_column].dtype

    models_regression = {
        # 'LinearRegression': LinearRegression(), # make error on large datasets that make it difficult to fit 
        'RidgeRegression': Ridge(alpha=0.5, # default alpha = 1.0
                                 solver='auto'
                                 ), 
        'SupportVectorRegressor': SVR(kernel='rbf',
                                      degree=3
                                      ),
        'KNeighborsRegressor': KNeighborsRegressor(n_neighbors=7
                                                   ),
        'DecisionTreeRegressor': DecisionTreeRegressor(max_depth=4
                                                       ),
        'RandomForestRegressor': RandomForestRegressor(n_estimators=10,
                                                       max_depth=5
                                                       ),
        'XBoostingRegressor': XGBRegressor(eta= 0.1, # default= 0.3
                                             gamma= 5, # default= 0
                                             max_depth= 5
                                             )
    }

    models_classification = {
        'LogisticRegression': LogisticRegression(C= 1, # default = 1.0
                                                max_iter= 10, # default= 100
                                                random_state=42
                                                 ),
        'SupportVectorClassifier': SVC(kernel='rbf',
                                       degree=3
                                       ),
        'KNeighborsClassifier': KNeighborsClassifier(n_neighbors=7
                                                     ),
        'DecisionTreeClassifier': DecisionTreeClassifier(max_depth=4,
                                                         ),
        'RandomForestClassifier': RandomForestClassifier(n_estimators=10,
                                                         max_depth=5
                                                         ),
        'XBoostingClassifier': XGBClassifier(eta= 0.1, # default= 0.3
                                             gamma= 5, # default= 0
                                             max_depth= 5
                                             )
    }
    
    return (models_classification, 'classification') if pd.api.types.is_object_dtype(target_dtype) or len(data[target_column].unique()) < 10 or pd.api.types.is_bool_dtype(target_dtype) else (models_regression, 'regression')


def create_models(selected_models, selected_model_names):
    """ Create instances of selected machine learning models.

    Args:
        selected_models (dict): A dictionary of selected machine learning models, 
                                typically generated by the 'select_models' function 
                                which are models_regression or models_classification.
        selected_model_names (list): A list of model names 'which user selected' to create instances for.


    Returns:
        models (dict): A dictionary containing instances of the selected machine learning models.
    """
    models = {}
    for model_name in selected_model_names: # loop on keys of selected_model_names (type just name string)
        if model_name in selected_models:
            model = selected_models[model_name] # get instances of models whcih user selected (type sklearn)
            models[model_name] = model # append model sklearn 
    return models